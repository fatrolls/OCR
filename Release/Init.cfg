# Given in pixels. Value depends on your character sizes. The given value is for the test image only
# If you set this value too large, " " character will not be detected
# If you set this value too small, it might detect every pixel as a ' '
SpaceCharacterWidth=4

# Sometimes space size will vary based on the font before / after it. This will take 33% width from previous and next character
# You probably should let this value 0 unless you must 
# Accepted values are : 0 (disable), 1 (Enable)
AutoAdjustSpaceWidth=0

# Depends on font sizes and row spacing. This given value was set for the test image
# If you set this value too small font with different height might be detected to be in different row
# If you set this value too large, multiple rows might get merged into a single row
DistanceBetweenRows=10

# Value 0 means that the fontlib image must match exactly the image found in the picture
# You might want to set this value to 1 ( maybe 2 ) based on how blurry your input image is. You might also need this value if your input suffers compression artifacts
# If you set this value too low, OCR might create a lot of "unknown" images that you will need to manually name. I think this is the best solution for you
# If you set this value too high OCR might not make a difference between character '1' and 'I' and 'l'.....
MaxPixelCountFontDeviation=0

# Value 1 means that the fontlib image must match exactly the input image. Has same effect as setting MaxPixelCountFontDeviation=0
# If you disable FontExactMatch and MaxPixelCountFontDeviation, OCR will find "best match" and will probably not produce "unrecognized" images if he manages to find matching sizes
# For proper OCR, you want to set this to 1
# You might want to disable exact match when you trained your OCR very well and you can not monitor unrecognized images anymore : you accept a close match instead a no match
# Having grayscale fonts instead black and white might produce differences more than zero
FontExactMatch=1

# Value 0 will force OCR to check for font sizes also. For good OCR, you should use value 0
# Value larger than zero will mean every font image is search in an area around a detected shape. This is required if you have fonts that get distorted due to bad binarization
# or blurring, or compression artifact and there is no way for you to know if the font in the image will contain 1-2 extra pixels
# You should not scan area larger than half font size
# Having grayscale fonts( fade out effect ) instead black and white might also require area scan
AreaScanRadius=0

# For a good OCR result you want to use value 0
# Value is in pixels. Value 1 would mean to compare all fonts with 'width+1' with all shapes in the image with 'width'. This can be very bad because '1' might resamble 'l' more than
# an actual '1'
# You might want to accept randomness in very blurred images, full of compression artifacts, bad binarization
FontSizeRandomness=0